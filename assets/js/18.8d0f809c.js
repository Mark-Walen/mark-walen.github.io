(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{509:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("TI-RTOS 任务在概念上等同于在单个 C 程序中并行执行函数的独立线程。实际上，将处理器从一项任务切换到另一项任务有助于实现并发。每个任务始终处于以下执行模式之一：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("执行")]),t._v("：任务当前正在运行")]),t._v(" "),a("li",[a("strong",[t._v("就绪")]),t._v("： 任务被安排执行")]),t._v(" "),a("li",[a("strong",[t._v("阻塞")]),t._v("：任务暂停执行")]),t._v(" "),a("li",[a("strong",[t._v("停止")]),t._v("：任务执行完成后，进入终止状态")]),t._v(" "),a("li",[a("strong",[t._v("静止")]),t._v("：任务在非活动列表中")])]),t._v(" "),a("p",[t._v("一个（并且只有一个）任务始终在运行，即使它只是空闲任务（参见"),a("RouterLink",{attrs:{to:"/embedded-system/ble5-stack/ti-rtos/#figure-40"}},[t._v("图 40")]),t._v("）。当前运行的任务可以通过调用某些任务模块函数以及其他模块（如信号量）提供的函数来阻止执行。当前任务也可以自行终止。在任何一种情况下，处理器都会切换到准备运行的最高优先级任务。有关这些功能的更多信息，请参阅 "),a("a",{attrs:{href:"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/tirtos/sysbios/docs/Bios_User_Guide.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("TI-RTOS 内核 (SYS/BIOS) 用户指南"),a("OutboundLink")],1),t._v("的包 "),a("code",[t._v("ti.sysbios.knl")]),t._v(" 部分中的任务模块。")],1),t._v(" "),a("p",[t._v("数字优先级分配给任务，多个任务可以具有相同的优先级。任务已准备好按从高到低的优先级执行；相同优先级的任务按到达顺序安排。当前正在运行的任务的优先级永远不会低于任何就绪任务的优先级。当有更高优先级的就绪任务时，正在运行的任务将被抢占并重新安排执行。")]),t._v(" "),a("p",[t._v("在 simple_peripheral 应用程序中，低功耗蓝牙协议栈任务被赋予最高优先级 (5)，而应用程序任务被赋予最低优先级 (1)。")]),t._v(" "),a("h2",{attrs:{id:"初始化任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化任务"}},[t._v("#")]),t._v(" 初始化任务")]),t._v(" "),a("p",[t._v("当任务被初始化时，它有自己的运行时堆栈，用于存储局部变量以及函数调用的进一步嵌套。在单个程序中执行的所有任务共享一组通用的全局变量，根据 C 函数作用域的标准规则进行访问。这套记忆就是任务的上下文。以下是正在构建的应用程序任务的示例。")]),t._v(" "),a("center",[a("span",{attrs:{id:"listing-13"}},[t._v("清单 13. 一个 TI-RTOS 任务")])]),a("br"),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<xdc/std.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<ti/sysbios/BIOS.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<ti/sysbios/knl/Task.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Task's stack */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" sbcTaskStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("TASK_STACK_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Task object (to be constructed) */")]),t._v("\nTask_Struct task0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Task function */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("taskFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UArg arg0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UArg arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Local variables. Variables here go onto task stack!! */")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Run one-time code when task starts */")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Run loop forever (unless terminated) */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n         * Block on a signal or for a duration. Examples:\n         *  ``Sempahore_pend()``\n         *  ``Event_pend()``\n         *  ``Task_sleep()``\n         *\n         * "Process data"\n         */')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    Task_Params taskParams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure task")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Task_Params_init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("taskParams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    taskParams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sbcTaskStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    taskParams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stackSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TASK_STACK_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    taskParams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priority "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TASK_PRIORITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Task_construct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("task0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" taskFunction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("taskParams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BIOS_start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在 "),a("code",[t._v("BIOS_start()")]),t._v(" 启动 TI-RTOS 内核的调度程序之前，任务创建在 "),a("code",[t._v("main()")]),t._v("函数中完成。调度程序启动后，任务将以指定的优先级执行。")]),t._v(" "),a("p",[t._v("TI 建议使用现有的应用程序任务进行特定于应用程序的处理。将附加任务添加到应用程序项目时，必须在 TI-RTOS 优先级范围内为任务的优先级分配优先级，该范围在 TI-RTOS 配置文件 ("),a("code",[t._v(".cfg")]),t._v(") 中定义。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("减少任务优先级的数量以获得 TI-RTOS 配置文件 (.cfg) 中的额外 RAM 节省：")]),t._v(" "),a("p",[a("code",[t._v("Task.numPriorities = 6;")])])]),t._v(" "),a("p",[t._v("不要添加优先级等于或高于蓝牙低功耗协议栈任务和相关支持任务的任务。有关系统任务层次结构的详细信息，请参阅"),a("a",{attrs:{href:"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/ble5stack/ble_user_guide/html/ble-stack-tirtos/tasks.html#initializing-a-task",target:"_blank",rel:"noopener noreferrer"}},[t._v("标准项目任务层次结构"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("确保任务的最小任务堆栈大小为 512 字节的预定义内存。至少，每个堆栈必须足够大以处理正常的子例程调用和一个任务抢占上下文。任务抢占上下文是当一个任务由于中断线程准备更高优先级任务而抢占另一个任务时保存的上下文。使用 IDE 的 TI-RTOS 分析工具，可以分析任务以确定峰值任务堆栈使用情况。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("术语"),a("em",[t._v("创建")]),t._v("描述了任务的实例化。实际的 TI-RTOS 方法是构建任务。有关构建 TI-RTOS 对象的详细信息，请参阅"),a("a",{attrs:{href:"./creating_vs_constructing"}},[t._v("创建 vs 构造")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"任务函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务函数"}},[t._v("#")]),t._v(" 任务函数")]),t._v(" "),a("p",[t._v("当一个任务被初始化时，一个指向任务函数的函数指针被传递给 "),a("code",[t._v("Task_construct")]),t._v(" 函数。当任务第一次有机会处理时，这是 TI-RTOS 运行的函数。"),a("a",{attrs:{href:"#listing-13"}},[t._v("清单 13")]),t._v(". 显示了这个 Task 函数的一般拓扑结构。在典型的用例中，任务大部分时间都处于阻塞状态，它会调用 "),a("code",[t._v("_pend()")]),t._v(" API，例如 "),a("code",[t._v("Semaphore_pend()")]),t._v("。通常，高优先级线程（例如 Hwis 或 Swis）使用 "),a("code",[t._v("_post()")]),t._v(" API（例如 "),a("code",[t._v("Semaphore_post()")]),t._v("）解除任务阻塞。")])],1)}),[],!1,null,null,null);s.default=e.exports}}]);