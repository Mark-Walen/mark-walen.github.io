const e=JSON.parse('{"key":"v-621e8c94","path":"/cas/ostep/virtualization/cpu-mechanism.html","title":"第 6 章 机制： 受限制的直接执行","lang":"zh-CN","frontmatter":{"title":"第 6 章 机制： 受限制的直接执行","date":"2023-09-20T00:00:00.000Z","description":"CPU 需要限制程序的执行，若不限制程序的执行，程序可能会执行一些非法操作影响系统的安全性，例如访问不能访问的内存或与外设执行 IO 操作；同时，操作系统可以使用中断来打断程序的执行，确保程序不会永久执行，从而实现进程切换。若具备一些 CPU 架构方面的知识，学习这一章节会更轻松一些。","head":[["meta",{"property":"og:url","content":"https://mark-walen.github.io/cas/ostep/virtualization/cpu-mechanism.html"}],["meta",{"property":"og:site_name","content":"蓝芒小栈"}],["meta",{"property":"og:title","content":"第 6 章 机制： 受限制的直接执行"}],["meta",{"property":"og:description","content":"CPU 需要限制程序的执行，若不限制程序的执行，程序可能会执行一些非法操作影响系统的安全性，例如访问不能访问的内存或与外设执行 IO 操作；同时，操作系统可以使用中断来打断程序的执行，确保程序不会永久执行，从而实现进程切换。若具备一些 CPU 架构方面的知识，学习这一章节会更轻松一些。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-07T14:35:41.000Z"}],["meta",{"property":"article:author","content":"Mark Walen"}],["meta",{"property":"article:published_time","content":"2023-09-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-07T14:35:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 6 章 机制： 受限制的直接执行\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-07T14:35:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mark Walen\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"思维导图","slug":"思维导图","link":"#思维导图","children":[]},{"level":2,"title":"引言","slug":"引言","link":"#引言","children":[]},{"level":2,"title":"6.1 基础技术：受限制的直接执行","slug":"_6-1-基础技术-受限制的直接执行","link":"#_6-1-基础技术-受限制的直接执行","children":[]},{"level":2,"title":"6.2 问题 1：受限制的操作","slug":"_6-2-问题-1-受限制的操作","link":"#_6-2-问题-1-受限制的操作","children":[]},{"level":2,"title":"6.3 问题 2：切换进程","slug":"_6-3-问题-2-切换进程","link":"#_6-3-问题-2-切换进程","children":[{"level":3,"title":"6.3.1 一种合作性方法：等待系统调用","slug":"_6-3-1-一种合作性方法-等待系统调用","link":"#_6-3-1-一种合作性方法-等待系统调用","children":[]},{"level":3,"title":"6.3.2 一种非合作性方法：操作系统接管控制","slug":"_6-3-2-一种非合作性方法-操作系统接管控制","link":"#_6-3-2-一种非合作性方法-操作系统接管控制","children":[]},{"level":3,"title":"6.4.3 保存和恢复上下文","slug":"_6-4-3-保存和恢复上下文","link":"#_6-4-3-保存和恢复上下文","children":[]}]},{"level":2,"title":"6.4 担心并发吗？","slug":"_6-4-担心并发吗","link":"#_6-4-担心并发吗","children":[]},{"level":2,"title":"6.5 小结","slug":"_6-5-小结","link":"#_6-5-小结","children":[]}],"git":{"createdTime":1695458858000,"updatedTime":1696689341000,"contributors":[{"name":"Mark-Walen","email":"mark_walen@qq.com","commits":7}]},"readingTime":{"minutes":22.75,"words":6826},"filePathRelative":"cas/ostep/virtualization/cpu-mechanism.md","localizedDate":"2023年9月20日","excerpt":"<h2> 思维导图</h2>\\n<figure><img src=\\"/assets/img/ostep/cpu-mechanism-mindmap.png\\" alt=\\"受限制的直接执行\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>受限制的直接执行</figcaption></figure>\\n<h2> 引言</h2>\\n<p>为了虚拟化 CPU，操作系统需要以某种方式让许多任务共享物理 CPU，让这些任务看起来像是同时运行的。基本思想很简单：给每个进程分配一个时间片，一个进程运行一段时间，如果时间片用完了或者提前结束，则切换到其他进程继续运行。通过时分的方式共享 CPU， 实现 CPU 虚拟化。</p>"}');export{e as data};
