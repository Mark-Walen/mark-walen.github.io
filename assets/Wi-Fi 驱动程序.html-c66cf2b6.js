import{_ as i,X as o,Y as p,Z as n,$ as s,a1 as a,a2 as t,E as c}from"./framework-a8949fcd.js";const l="/assets/img/esp32/wifi/wifi_program_prototype.png",r={},_=t('<h1 id="wi-fi-驱动程序" tabindex="-1"><a class="header-anchor" href="#wi-fi-驱动程序" aria-hidden="true">#</a> Wi-Fi 驱动程序</h1><h2 id="esp32-s3-wi-fi-功能列表" tabindex="-1"><a class="header-anchor" href="#esp32-s3-wi-fi-功能列表" aria-hidden="true">#</a> ESP32-S3 Wi-Fi 功能列表</h2><p>ESP32-S3 支持以下 Wi-Fi 功能：</p><ul><li>支持 4 个虚拟接口，即 STA、AP、Sniffer 和 reserved。</li><li>支持仅 station 模式、仅 AP 模式、station/AP 共存模式</li><li>支持使用 IEEE 802.11b、IEEE 802.11g、IEEE 802.11n 和 API 配置协议模式</li><li>支持 WPA/WPA2/WPA3/WPA2-企业版/WPA3-企业版/WAPI/WPS 和 DPP</li><li>支持 AMSDU、AMPDU、HT40、QoS 以及其它主要功能</li><li>支持 Modem-sleep</li><li>支持乐鑫专属协议，可实现 <strong>1 km</strong> 数据通信量</li><li>空中数据传输最高可达 20 MBit/s TCP 吞吐量和 30 MBit/s UDP 吞吐量</li><li>支持 Sniffer</li><li>支持快速扫描和全信道扫描</li><li>支持多个天线</li><li>支持获取信道状态信息</li></ul><h2 id="esp32-s3-wi-fi-api-错误代码" tabindex="-1"><a class="header-anchor" href="#esp32-s3-wi-fi-api-错误代码" aria-hidden="true">#</a> ESP32-S3 Wi-Fi API 错误代码</h2><p>所有 ESP32-S3 Wi-Fi API 都有定义好的返回值，即错误代码。这些错误代码可分类为：</p><ul><li>无错误，例如：返回值 <code>ESP_OK</code>代表 API 成功返回</li><li>可恢复错误，例如：<code>ESP_ERR_NO_MEM</code></li><li>不可恢复的非关键性错误</li><li>不可恢复的关键性错误</li></ul><p>一个错误是否为关键性取决于其 API 和应用场景，并且由 API 用户定义。</p><h2 id="esp32-s3-wi-fi-编程模型" tabindex="-1"><a class="header-anchor" href="#esp32-s3-wi-fi-编程模型" aria-hidden="true">#</a> ESP32-S3 Wi-Fi 编程模型</h2><figure><img src="'+l+'" alt="Wi-Fi 编程模型" tabindex="0" loading="lazy"><figcaption><em>Wi-Fi 编程模型</em></figcaption></figure>',10),u={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">esp_netif_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">esp_event_loop_create_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">esp_netif_create_default_wifi_sta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">wifi_init_config_t</span> cfg <span class="token operator">=</span> <span class="token function">WIFI_INIT_CONFIG_DEFAULT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">esp_wifi_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/system/esp_event.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/system/esp_event.html#esp-event-default-loops",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/system/esp_event.html#_CPPv426esp_event_handler_register16esp_event_base_t7int32_t19esp_event_handler_tPv",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"esp_event_handler_register()",-1),h={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_netif.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">event_handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">,</span> <span class="token class-name">esp_event_base_t</span> event_base<span class="token punctuation">,</span>
                                <span class="token class-name">int32_t</span> event_id<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> event_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event_base <span class="token operator">==</span> WIFI_EVENT <span class="token operator">&amp;&amp;</span> event_id <span class="token operator">==</span> WIFI_EVENT_STA_START<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">esp_wifi_connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event_base <span class="token operator">==</span> WIFI_EVENT <span class="token operator">&amp;&amp;</span> event_id <span class="token operator">==</span> WIFI_EVENT_STA_DISCONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s_retry_num <span class="token operator">&lt;</span> EXAMPLE_ESP_MAXIMUM_RETRY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">esp_wifi_connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s_retry_num<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">ESP_LOGI</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;retry to connect to the AP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">xEventGroupSetBits</span><span class="token punctuation">(</span>s_wifi_event_group<span class="token punctuation">,</span> WIFI_FAIL_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">ESP_LOGI</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">&quot;connect to the AP fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event_base <span class="token operator">==</span> IP_EVENT <span class="token operator">&amp;&amp;</span> event_id <span class="token operator">==</span> IP_EVENT_STA_GOT_IP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ip_event_got_ip_t</span><span class="token operator">*</span> event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ip_event_got_ip_t</span><span class="token operator">*</span><span class="token punctuation">)</span> event_data<span class="token punctuation">;</span>
        <span class="token function">ESP_LOGI</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;got ip:&quot;</span> IPSTR<span class="token punctuation">,</span> <span class="token function">IP2STR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-&gt;</span>ip_info<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s_retry_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">xEventGroupSetBits</span><span class="token punctuation">(</span>s_wifi_event_group<span class="token punctuation">,</span> WIFI_CONNECTED_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">esp_event_handler_instance_t</span> instance_any_id<span class="token punctuation">;</span>
<span class="token class-name">esp_event_handler_instance_t</span> instance_got_ip<span class="token punctuation">;</span>
<span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">esp_event_handler_instance_register</span><span class="token punctuation">(</span>WIFI_EVENT<span class="token punctuation">,</span>
                                                    ESP_EVENT_ANY_ID<span class="token punctuation">,</span>
                                                    <span class="token operator">&amp;</span>event_handler<span class="token punctuation">,</span>
                                                    <span class="token constant">NULL</span><span class="token punctuation">,</span>
                                                    <span class="token operator">&amp;</span>instance_any_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">esp_event_handler_instance_register</span><span class="token punctuation">(</span>IP_EVENT<span class="token punctuation">,</span>
                                                    IP_EVENT_STA_GOT_IP<span class="token punctuation">,</span>
                                                    <span class="token operator">&amp;</span>event_handler<span class="token punctuation">,</span>
                                                    <span class="token constant">NULL</span><span class="token punctuation">,</span>
                                                    <span class="token operator">&amp;</span>instance_got_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="esp32-s3-wi-fi-事件描述" tabindex="-1"><a class="header-anchor" href="#esp32-s3-wi-fi-事件描述" aria-hidden="true">#</a> ESP32-S3 Wi-Fi 事件描述</h2><h3 id="wifi-event-声明" tabindex="-1"><a class="header-anchor" href="#wifi-event-声明" aria-hidden="true">#</a> WIFI event 声明</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** WiFi event declarations */</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    WIFI_EVENT_SCAN_DONE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token comment">/**&lt; ESP32 finish scanning AP */</span>
    WIFI_EVENT_STA_START<span class="token punctuation">,</span>                <span class="token comment">/**&lt; ESP32 station start */</span>
    WIFI_EVENT_STA_STOP<span class="token punctuation">,</span>                 <span class="token comment">/**&lt; ESP32 station stop */</span>
    WIFI_EVENT_STA_CONNECTED<span class="token punctuation">,</span>            <span class="token comment">/**&lt; ESP32 station connected to AP */</span>
    WIFI_EVENT_STA_DISCONNECTED<span class="token punctuation">,</span>         <span class="token comment">/**&lt; ESP32 station disconnected from AP */</span>
    WIFI_EVENT_STA_AUTHMODE_CHANGE<span class="token punctuation">,</span>      <span class="token comment">/**&lt; the auth mode of AP connected by ESP32 station changed */</span>

    WIFI_EVENT_STA_WPS_ER_SUCCESS<span class="token punctuation">,</span>       <span class="token comment">/**&lt; ESP32 station wps succeeds in enrollee mode */</span>
    WIFI_EVENT_STA_WPS_ER_FAILED<span class="token punctuation">,</span>        <span class="token comment">/**&lt; ESP32 station wps fails in enrollee mode */</span>
    WIFI_EVENT_STA_WPS_ER_TIMEOUT<span class="token punctuation">,</span>       <span class="token comment">/**&lt; ESP32 station wps timeout in enrollee mode */</span>
    WIFI_EVENT_STA_WPS_ER_PIN<span class="token punctuation">,</span>           <span class="token comment">/**&lt; ESP32 station wps pin code in enrollee mode */</span>
    WIFI_EVENT_STA_WPS_ER_PBC_OVERLAP<span class="token punctuation">,</span>   <span class="token comment">/**&lt; ESP32 station wps overlap in enrollee mode */</span>

    <span class="token comment">/**********/</span>
    WIFI_EVENT_AP_START<span class="token punctuation">,</span>                 <span class="token comment">/**&lt; ESP32 soft-AP start */</span>
    WIFI_EVENT_AP_STOP<span class="token punctuation">,</span>                  <span class="token comment">/**&lt; ESP32 soft-AP stop */</span>
    WIFI_EVENT_AP_STACONNECTED<span class="token punctuation">,</span>          <span class="token comment">/**&lt; a station connected to ESP32 soft-AP */</span>
    WIFI_EVENT_AP_STADISCONNECTED<span class="token punctuation">,</span>       <span class="token comment">/**&lt; a station disconnected from ESP32 soft-AP */</span>
    WIFI_EVENT_AP_PROBEREQRECVED<span class="token punctuation">,</span>        <span class="token comment">/**&lt; Receive probe request packet in soft-AP interface */</span>

    WIFI_EVENT_FTM_REPORT<span class="token punctuation">,</span>               <span class="token comment">/**&lt; Receive report of FTM procedure */</span>

    <span class="token comment">/* Add next events after this only */</span>
    WIFI_EVENT_STA_BSS_RSSI_LOW<span class="token punctuation">,</span>         <span class="token comment">/**&lt; AP&#39;s RSSI crossed configured threshold */</span>
    WIFI_EVENT_ACTION_TX_STATUS<span class="token punctuation">,</span>         <span class="token comment">/**&lt; Status indication of Action Tx operation */</span>
    WIFI_EVENT_ROC_DONE<span class="token punctuation">,</span>                 <span class="token comment">/**&lt; Remain-on-Channel operation complete */</span>

    WIFI_EVENT_STA_BEACON_TIMEOUT<span class="token punctuation">,</span>       <span class="token comment">/**&lt; ESP32 station beacon timeout */</span>

    WIFI_EVENT_CONNECTIONLESS_MODULE_WAKE_INTERVAL_START<span class="token punctuation">,</span>   <span class="token comment">/**&lt; ESP32 connectionless module wake interval start */</span>

    WIFI_EVENT_MAX<span class="token punctuation">,</span>                      <span class="token comment">/**&lt; Invalid WiFi event ID */</span>
<span class="token punctuation">}</span> <span class="token class-name">wifi_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="wifi-event-scan-done" tabindex="-1"><a class="header-anchor" href="#wifi-event-scan-done" aria-hidden="true">#</a> WIFI_EVENT_SCAN_DONE</h4>`,5),E={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv419esp_wifi_scan_startPK18wifi_scan_config_tb",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"esp_wifi_scan_start()",-1),b=n("li",null,"扫描已完成，例如：Wi-Fi 已成功找到目标 AP 或已扫描所有信道。",-1),T={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv418esp_wifi_scan_stopv",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"esp_wifi_scan_stop()",-1),S={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv419esp_wifi_scan_startPK18wifi_scan_config_tb",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"esp_wifi_scan_start()",-1),A=n("p",null,"以下情况下将不会产生扫描完成事件：",-1),g=n("li",null,"当前扫描被阻止。",-1),C={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv416esp_wifi_connectv",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"esp_wifi_connect()",-1),F={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv424esp_wifi_scan_get_ap_numP8uint16_t",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"esp_wifi_scan_get_ap_num()",-1),O={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv428esp_wifi_scan_get_ap_recordsP8uint16_tP16wifi_ap_record_t",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"esp_wifi_scan_get_ap_records()",-1),R=n("strong",null,"切记该步骤",-1),y=n("h4",{id:"wifi-event-sta-start",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wifi-event-sta-start","aria-hidden":"true"},"#"),s(" WIFI_EVENT_STA_START")],-1),L={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv414esp_wifi_startv",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"esp_wifi_start()",-1),z=n("code",null,"ESP_OK",-1),j={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv416esp_wifi_connectv",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"esp_wifi_connect()",-1),G=n("h4",{id:"wifi-event-sta-connected",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wifi-event-sta-connected","aria-hidden":"true"},"#"),s(" WIFI_EVENT_STA_CONNECTED")],-1),U={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv416esp_wifi_connectv",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"esp_wifi_connect()",-1),H=n("code",null,"ESP_OK",-1),K=n("u",null,"接收到此事件后，事件任务将启动 DHCP 客户端服务并开始获取 IP 地址。此时，Wi-Fi 驱动程序已准备就绪，可发送和接收数据。",-1),q=n("u",null,[s("但是，如果你的应用程序需基于 LwIP 进行，则还需等待 "),n("em",null,"got ip"),s(" 事件发生后才可开始。")],-1),X=n("h4",{id:"wifi-event-sta-stop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wifi-event-sta-stop","aria-hidden":"true"},"#"),s(" WIFI_EVENT_STA_STOP")],-1),Y={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv413esp_wifi_stopv",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"esp_wifi_stop()",-1),Z=n("code",null,"ESP_OK",-1),$=n("u",null,"接收到此事件后，事件任务将进行释放 station IP 地址、终止 DHCP 客户端服务、移除 TCP/UDP 相关连接并清除 LwIP station netif 等动作。",-1),J=n("h4",{id:"wifi-event-sta-disconnected",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wifi-event-sta-disconnected","aria-hidden":"true"},"#"),s(" WIFI_EVENT_STA_DISCONNECTED")],-1),nn=n("p",null,"此事件将在以下情况下产生：",-1),sn={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv419esp_wifi_disconnectv",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"esp_wifi_disconnect()",-1),an={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv413esp_wifi_stopv",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"esp_wifi_stop()",-1),on={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv416esp_wifi_connectv",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"esp_wifi_connect()",-1),cn=n("u",null,"未能成功连接至 AP",-1),ln=n("li",null,"Wi-Fi 连接因为某些原因而中断，例如：station 连续多次丢失 N beacon、AP 踢掉 station、AP 认证模式改变等。",-1),rn=n("p",null,"接收到此事件后，事件任务的默认动作为：",-1),_n=n("ul",null,[n("li",null,"关闭 station 的 LwIP netif。"),n("li",null,"通知 LwIP 任务清除导致所有套接字状态错误的 UDP/TCP 连接。针对基于套接字编写的应用程序，其回调函数可以在接收到此事件时（如有必要）关闭并重新创建所有套接字。")],-1),un={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv416esp_wifi_connectv",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"esp_wifi_connect()",-1),kn={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv419esp_wifi_disconnectv",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"esp_wifi_disconnect()",-1),fn={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv416esp_wifi_connectv",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"esp_wifi_connect()",-1),hn=n("p",null,"需要注意的另一点是：接收到此事件后，LwIP 的默认动作是终止所有 TCP 套接字连接。大多数情况下，该动作不会造成影响。但对某些特殊应用程序可能除外。例如：",-1),Pn=n("li",null,"应用程序创建一个了 TCP 连接，以维护每 60 秒发送一次的应用程序级、保持活动状态的数据。",-1),En=n("li",null,[s("由于某些原因，Wi-Fi 连接被切断并引发了 WIFI_EVENT_STA_DISCONNECTED 事件。根据当前实现，此时所有 TCP 连接都将被移除，且保持活动的套接字将处于错误的状态中。但是，由于应用程序设计者认为网络层 "),n("strong",null,"不应"),s(" 考虑这个 Wi-Fi 层的错误，因此应用程序不会关闭套接字。")],-1),In={href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s3/api-reference/network/esp_wifi.html#_CPPv416esp_wifi_connectv",target:"_blank",rel:"noopener noreferrer"},bn=n("code",null,"esp_wifi_connect()",-1),Tn=n("strong",null,"同时，station 连接至同一个 AP 并获得与之前相同的 IPV4 地址。",-1),wn=n("li",null,"60 秒后，当应用程序发送具有保持活动状态的套接字的数据时，套接字将返回错误，应用程序将关闭套接字并在必要时重新创建。",-1),Sn=t(`<h3 id="ip-event-声明" tabindex="-1"><a class="header-anchor" href="#ip-event-声明" aria-hidden="true">#</a> IP event 声明</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** IP event declarations */</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    IP_EVENT_STA_GOT_IP<span class="token punctuation">,</span>               <span class="token comment">/*!&lt; station got IP from connected AP */</span>
    IP_EVENT_STA_LOST_IP<span class="token punctuation">,</span>              <span class="token comment">/*!&lt; station lost IP and the IP is reset to 0 */</span>
    IP_EVENT_AP_STAIPASSIGNED<span class="token punctuation">,</span>         <span class="token comment">/*!&lt; soft-AP assign an IP to a connected station */</span>
    IP_EVENT_GOT_IP6<span class="token punctuation">,</span>                  <span class="token comment">/*!&lt; station or ap or ethernet interface v6IP addr is preferred */</span>
    IP_EVENT_ETH_GOT_IP<span class="token punctuation">,</span>               <span class="token comment">/*!&lt; ethernet got IP from connected AP */</span>
    IP_EVENT_ETH_LOST_IP<span class="token punctuation">,</span>              <span class="token comment">/*!&lt; ethernet lost IP and the IP is reset to 0 */</span>
    IP_EVENT_PPP_GOT_IP<span class="token punctuation">,</span>               <span class="token comment">/*!&lt; PPP interface got IP */</span>
    IP_EVENT_PPP_LOST_IP<span class="token punctuation">,</span>              <span class="token comment">/*!&lt; PPP interface lost IP */</span>
<span class="token punctuation">}</span> <span class="token class-name">ip_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Nn(An,gn){const e=c("ExternalLinkIcon");return o(),p("div",null,[_,n("p",null,[s("Wi-Fi 驱动程序可以看作是一个无法感知上层代码（如 TCP/IP 堆栈、应用程序任务、事件任务等）的黑匣子。通常，应用程序任务（代码）负责调用 "),n("a",u,[s("Wi-Fi 驱动程序 APIs"),a(e)]),s(" 来初始化 Wi-Fi，并在必要时处理 Wi-Fi 事件。然后，Wi-Fi 驱动程序接收并处理 API 数据，并在应用程序中插入事件。")]),d,n("p",null,[s("Wi-Fi 事件处理是在 "),n("a",k,[s("esp_event 库"),a(e)]),s(" 的基础上进行的。Wi-Fi 驱动程序将事件发送至 "),n("a",v,[s("默认事件循环"),a(e)]),s("，应用程序便可以使用 "),n("a",f,[m,a(e)]),s(" 中的回调函数处理这些事件。除此之外，"),n("a",h,[s("esp_netif 组件"),a(e)]),s(" 也负责处理 Wi-Fi 事件，并产生一系列默认行为。例如，当 Wi-Fi station 连接至一个 AP 时，esp_netif 将自动开启 DHCP 客户端服务（系统默认）。")]),P,n("p",null,[s("扫描完成事件，由 "),n("a",E,[I,a(e)]),s(" 函数触发，将在以下情况下产生：")]),n("ul",null,[b,n("li",null,[s("当前扫描因函数 "),n("a",T,[w,a(e)]),s(" 而终止。")]),n("li",null,[s("在当前扫描完成之前调用了函数 "),n("a",S,[N,a(e)]),s("。此时，新的扫描将覆盖当前扫描过程，并生成一个扫描完成事件。")])]),A,n("ul",null,[g,n("li",null,[s("当前扫描是由函数 "),n("a",C,[W,a(e)]),s(" 触发的。")])]),n("p",null,[s("接收到此事件后，事件任务暂不做任何响应。首先，应用程序的事件回调函数需调用"),n("a",F,[V,a(e)]),s(" 和 "),n("a",O,[D,a(e)]),s(" 获取已扫描的 AP 列表，然后触发 Wi-Fi 驱动程序释放在扫描过程中占用的内存空间（"),R,s("）。")]),y,n("p",null,[s("如果调用函数 "),n("a",L,[x,a(e)]),s(" 后接收到返回值 "),z,s("，且当前 Wi-Fi 处于 station 或 station/AP 共存模式，则将产生此事件。"),n("u",null,[s("接收到此事件后，事件任务将初始化 LwIP 网络接口 (netif)。通常，应用程序的事件回调函数需调用 "),n("a",j,[M,a(e)]),s(" 来连接已配置的 AP。")])]),G,n("p",null,[s("如果调用函数 "),n("a",U,[B,a(e)]),s(" 后接收到返回值 "),H,s("，且 station 已成功连接目标 AP，则将产生此连接事件。"),K,s("如果你的应用程序不依赖于 LwIP（即 IP 地址），则此刻便可以开始应用程序开发工作。"),q]),X,n("p",null,[s("如果调用函数 "),n("a",Y,[Q,a(e)]),s(" 后接收到返回值 "),Z,s("，且当前 Wi-Fi 处于 station 或 station/AP 共存模式，则将产生此事件。"),$,s("此时，应用程序的事件回调函数通常不需做任何响应。")]),J,nn,n("ul",null,[n("li",null,[n("u",null,[s("调用了函数 "),n("a",sn,[en,a(e)]),s(" 或 "),n("a",an,[tn,a(e)]),s("，且 Wi-Fi station 已成功连接至 AP")]),s("。")]),n("li",null,[s("调用了函数 "),n("a",on,[pn,a(e)]),s("，但 Wi-Fi 驱动程序因为某些原因"),cn,s("，例如：未扫描到目标 AP、验证超时等。或存在多个 SSID 相同的 AP，station 无法连接所有已找到的 AP，也将产生该事件。")]),ln]),rn,_n,n("p",null,[s("应用程序处理此事件最常用的方法为：调用函数 "),n("a",un,[dn,a(e)]),s(" 重新连接 Wi-Fi。"),n("strong",null,[s("但是，如果此事件是由函数 "),n("a",kn,[vn,a(e)]),s(" 引发的，则应用程序不应调用 "),n("a",fn,[mn,a(e)]),s(" 来重新连接。")])]),hn,n("ul",null,[Pn,En,n("li",null,[s("5 秒后，因为在应用程序的事件回调函数中调用了 "),n("a",In,[bn,a(e)]),s("，Wi-Fi 连接恢复。"),Tn]),wn]),Sn])}const Wn=i(r,[["render",Nn],["__file","Wi-Fi 驱动程序.html.vue"]]);export{Wn as default};
